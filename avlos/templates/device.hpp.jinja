/*
* This file was automatically generated using Avlos.
* https://github.com/tinymovr/avlos
*
* Any changes to this file will be overwritten when
* content is regenerated.
*/

#pragma once

#include <cstdint>
{%- for include in includes %}
#include <{{ include }}>
{%- endfor %}

{%- if instance.remote_attributes %}
    {%- for attr in instance.remote_attributes.values() %}
        {%- if attr.remote_attributes %}
#include <{{attr.name}}.hpp>
        {%- endif %}
    {%- endfor %}
{%- endif %}

#define EP_BITS (6)
#define RECV_DELAY_US (160.0f)

{%- for ep in instance | flags_eps %}

enum {{ ep.full_name | replace(".", "_") }}_flags
{
    {%- set comma = joiner(", ") %}
    {%- for flag in ep.flags %}{{ comma() }}
    {{ ep.full_name | replace(".", "_") | upper }}_{{ flag }} = {{ loop.index }}
    {%- endfor %}
};
{%- endfor %}

typedef void (*send_callback)(uint32_t arbitration_id, uint8_t *data, uint8_t dlc, bool rtr);
typedef bool (*recv_callback)(uint32_t arbitration_id, uint8_t *data, uint8_t *dlc);

class Device
{
    public:

        Device(uint8_t _can_node_id, send_callback _send_cb, recv_callback _recv_cb):
            can_node_id(_can_node_id), send_cb(_send_cb), recv_cb(_recv_cb) {};

    {%- if instance.remote_attributes %}
        {%- for attr in instance.remote_attributes.values() %}
            {%- if attr.remote_attributes %}
        {{attr.name}} {{attr.name}};

            {%- else %}
                {%- if attr.c_getter %}
        {{attr.dtype.c_name}} get_{{attr.name}}(void);
                {%- endif %}
                {%- if attr.c_setter %}
        void set_{{attr.name}}({{attr.dtype.c_name}} value);
                {%- endif %}
                {%- if attr.c_caller %}
                    {%- set comma = joiner(", ") %}
        {{attr.dtype.c_name}} {{attr.name}}({%- for arg in attr.arguments %}{{ comma() }}{{arg.dtype.c_name}} {{ arg.name }} {%- endfor %});
                {%- endif %}

            {%- endif %}
        {%- endfor %}
    {%- endif %}

    private:

        uint8_t can_node_id;
        send_callback send_cb;
        recv_callback recv_cb;
        uint8_t _data[8];
        uint8_t _dlc;

        void send(uint8_t cmd_id, uint8_t *data, uint8_t data_size, bool rtr);
        bool recv(uint8_t cmd_id, uint8_t *data, uint8_t *data_size, uint16_t delay_us);
        uint8_t get_arbitration_id(uint8_t cmd_id);

};
